#!/usr/bin/env python
"""
Script para diagnosticar problemas con los c√°lculos de recaudaci√≥n
"""
import os
import sys
import django
from datetime import date, timedelta

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'creditos.settings')
django.setup()

from main.models import Cliente, Credito, Pago, TareaCobro, Cobrador
from django.db.models import Sum

def diagnosticar_recaudacion_sofia():
    print("üîç DIAGN√ìSTICO DE RECAUDACI√ìN - SOFIA VERGARA")
    print("=" * 60)
    
    # Buscar a Sofia Vergara
    try:
        sofia = Cobrador.objects.get(nombres__icontains="SOFIA", apellidos__icontains="VERGARA")
        print(f"üë§ Cobrador encontrado: {sofia.nombre_completo}")
        print(f"    ID: {sofia.id}")
    except Cobrador.DoesNotExist:
        print("‚ùå No se encontr√≥ a SOFIA VERGARA")
        return
    
    hoy = date.today()
    print(f"üìÖ Fecha de an√°lisis: {hoy}")
    print()
    
    # 1. VERIFICAR TAREAS DE COBRO
    print("üìã TAREAS DE COBRO:")
    print("-" * 30)
    tareas_sofia = TareaCobro.objects.filter(cobrador=sofia, fecha_asignacion=hoy)
    
    for tarea in tareas_sofia:
        print(f"üéØ Tarea #{tarea.id}:")
        print(f"    Cliente: {tarea.cliente.nombre_completo}")
        print(f"    Estado: {tarea.estado}")
        print(f"    Monto a cobrar: ${tarea.monto_a_cobrar}")
        if tarea.monto_cobrado:
            print(f"    Monto cobrado: ${tarea.monto_cobrado}")
        if tarea.fecha_visita:
            print(f"    Fecha visita: {tarea.fecha_visita}")
        print()
    
    # 2. VERIFICAR PAGOS REGISTRADOS HOY
    print("üí∞ PAGOS REGISTRADOS HOY:")
    print("-" * 30)
    pagos_sofia_hoy = Pago.objects.filter(
        credito__cobrador=sofia,
        fecha_pago__date=hoy
    ).order_by('-fecha_pago')
    
    total_pagos_real = 0
    for pago in pagos_sofia_hoy:
        print(f"üíµ Pago #{pago.id}:")
        print(f"    Cliente: {pago.credito.cliente.nombre_completo}")
        print(f"    Monto: ${pago.monto}")
        print(f"    Fecha: {pago.fecha_pago}")
        print(f"    Cr√©dito: #{pago.credito.id}")
        if pago.observaciones:
            print(f"    Observaciones: {pago.observaciones}")
        total_pagos_real += float(pago.monto)
        print()
    
    print(f"üìä TOTAL REAL PAGOS HOY: ${total_pagos_real}")
    print()
    
    # 3. VERIFICAR C√ÅLCULOS DEL SISTEMA
    print("üßÆ C√ÅLCULOS DEL SISTEMA:")
    print("-" * 30)
    
    # C√°lculo usando Sum()
    total_sum = Pago.objects.filter(
        credito__cobrador=sofia,
        fecha_pago__date=hoy
    ).aggregate(total=Sum('monto'))['total'] or 0
    
    print(f"Sum() del sistema: ${total_sum}")
    print(f"Suma manual: ${total_pagos_real}")
    print(f"Diferencia: ${float(total_sum) - total_pagos_real}")
    print()
    
    # 4. VERIFICAR TAREAS MARCADAS COMO COBRADAS
    print("‚úÖ TAREAS MARCADAS COMO COBRADAS:")
    print("-" * 30)
    
    tareas_cobradas = TareaCobro.objects.filter(
        cobrador=sofia,
        fecha_asignacion=hoy,
        estado='COBRADO'
    )
    
    total_tareas_cobrado = 0
    for tarea in tareas_cobradas:
        print(f"‚úÖ Tarea #{tarea.id}:")
        print(f"    Cliente: {tarea.cliente.nombre_completo}")
        print(f"    Monto cobrado: ${tarea.monto_cobrado}")
        if tarea.monto_cobrado:
            total_tareas_cobrado += float(tarea.monto_cobrado)
        print()
    
    print(f"üìä TOTAL DESDE TAREAS: ${total_tareas_cobrado}")
    print()
    
    # 5. RESUMEN Y DIAGN√ìSTICO
    print("üéØ DIAGN√ìSTICO:")
    print("-" * 30)
    print(f"Total desde Pagos (Sum): ${total_sum}")
    print(f"Total desde Pagos (manual): ${total_pagos_real}")
    print(f"Total desde Tareas: ${total_tareas_cobrado}")
    
    if total_pagos_real != float(total_sum):
        print("‚ùå PROBLEMA: Diferencia entre Sum() y suma manual")
    
    if total_pagos_real != total_tareas_cobrado:
        print("‚ùå PROBLEMA: Diferencia entre Pagos y Tareas")
        print("    Posible causa: Pagos registrados fuera del sistema de tareas")
    
    if total_sum == 368 and total_pagos_real > 30000:
        print("‚ùå PROBLEMA CR√çTICO: Probable error de formato/tipo de datos")
        print("    El sistema muestra $368 pero los datos reales suman m√°s de $30,000")
    
    print()
    return {
        'total_sum': total_sum,
        'total_manual': total_pagos_real,
        'total_tareas': total_tareas_cobrado
    }

def revisar_vista_recaudacion():
    print("üîç REVISANDO VISTA DE RECAUDACI√ìN")
    print("=" * 40)
    
    # Simular lo que hace la vista de recaudaci√≥n
    from datetime import date
    from django.db.models import Sum, Count
    
    hoy = date.today()
    fecha_desde = hoy.strftime('%Y-%m-%d')
    fecha_hasta = hoy.strftime('%Y-%m-%d')
    
    print(f"Filtros: desde {fecha_desde} hasta {fecha_hasta}")
    
    cobradores = Cobrador.objects.filter(activo=True).order_by('nombres', 'apellidos')
    
    for cobrador in cobradores:
        if "SOFIA" in cobrador.nombres.upper():
            print(f"\nüë§ Analizando: {cobrador.nombre_completo}")
            
            # Replicar la l√≥gica exacta de la vista
            pagos_cobrador = Pago.objects.filter(
                credito__cobrador=cobrador,
                fecha_pago__date__gte=fecha_desde,
                fecha_pago__date__lte=fecha_hasta
            )
            
            print(f"Pagos encontrados: {pagos_cobrador.count()}")
            
            for pago in pagos_cobrador:
                print(f"  - Pago #{pago.id}: ${pago.monto} ({type(pago.monto)})")
            
            # Usar el mismo aggregate que la vista
            total_recaudado = pagos_cobrador.aggregate(Sum('monto'))['monto__sum'] or 0
            print(f"Aggregate result: {total_recaudado} ({type(total_recaudado)})")
            
            # Suma manual para comparar
            suma_manual = sum([pago.monto for pago in pagos_cobrador])
            print(f"Suma manual: {suma_manual} ({type(suma_manual)})")
            
            break

if __name__ == "__main__":
    try:
        resultado = diagnosticar_recaudacion_sofia()
        print("\n" + "=" * 60)
        revisar_vista_recaudacion()
        
        print("\n" + "=" * 60)
        print("üí° RECOMENDACIONES:")
        print("1. Verificar tipos de datos en modelo Pago.monto")
        print("2. Revisar si hay conversiones err√≥neas en las vistas")
        print("3. Verificar formato de n√∫meros en templates")
        print("4. Revisar si hay filtros incorrectos en las consultas")
        
    except Exception as e:
        print(f"‚ùå Error en diagn√≥stico: {e}")
        import traceback
        traceback.print_exc()