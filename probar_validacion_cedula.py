#!/usr/bin/env python
"""
Script para probar la nueva validaci√≥n de c√©dulas (5-10 d√≠gitos)
"""

import os
import sys
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'creditos.settings')
django.setup()

from main.models import Cliente, Codeudor
from django.core.exceptions import ValidationError


def probar_cedulas():
    """
    Prueba diferentes casos de c√©dulas para validar la nueva regla
    """
    print("üß™ PROBANDO VALIDACI√ìN DE C√âDULAS")
    print("=" * 50)
    
    # Casos de prueba
    casos_prueba = [
        # (cedula, descripcion, deberia_ser_valida)
        ("12345", "C√©dula de 5 d√≠gitos (m√≠nimo)", True),
        ("123456", "C√©dula de 6 d√≠gitos", True),
        ("1234567", "C√©dula de 7 d√≠gitos", True),
        ("12345678", "C√©dula de 8 d√≠gitos", True),
        ("123456789", "C√©dula de 9 d√≠gitos", True),
        ("1234567890", "C√©dula de 10 d√≠gitos (m√°ximo)", True),
        ("1234", "C√©dula de 4 d√≠gitos (muy corta)", False),
        ("12345678901", "C√©dula de 11 d√≠gitos (muy larga)", False),
        ("12345ABC", "C√©dula con letras", False),
        ("", "C√©dula vac√≠a", False),
        ("00000", "C√©dula con solo ceros", True),  # T√©cnicamente v√°lida pero poco realista
    ]
    
    resultados_correctos = 0
    total_casos = len(casos_prueba)
    
    for cedula, descripcion, deberia_ser_valida in casos_prueba:
        print(f"\nüìù Probando: {descripcion}")
        print(f"   C√©dula: '{cedula}'")
        print(f"   Deber√≠a ser v√°lida: {'S√ç' if deberia_ser_valida else 'NO'}")
        
        try:
            # Crear un cliente temporal (sin guardarlo)
            cliente_temp = Cliente(
                nombres="Prueba",
                apellidos="Temporal",
                cedula=cedula,
                celular="3001234567",
                direccion="Calle Falsa 123",
                barrio="Barrio Prueba"
            )
            
            # Ejecutar validaci√≥n completa
            cliente_temp.full_clean()
            
            # Si llegamos aqu√≠, la validaci√≥n fue exitosa
            if deberia_ser_valida:
                print("   ‚úÖ CORRECTO: C√©dula v√°lida como esperado")
                resultados_correctos += 1
            else:
                print("   ‚ùå ERROR: C√©dula deber√≠a ser inv√°lida pero fue aceptada")
                
        except ValidationError as e:
            # Si hay error de validaci√≥n
            if not deberia_ser_valida:
                print("   ‚úÖ CORRECTO: C√©dula inv√°lida como esperado")
                print(f"   üìÑ Error: {e.message_dict.get('cedula', ['Error desconocido'])[0]}")
                resultados_correctos += 1
            else:
                print("   ‚ùå ERROR: C√©dula deber√≠a ser v√°lida pero fue rechazada")
                print(f"   üìÑ Error: {e.message_dict.get('cedula', ['Error desconocido'])[0]}")
        
        except Exception as e:
            print(f"   üí• ERROR INESPERADO: {str(e)}")
    
    # Resumen
    print(f"\nüìä RESUMEN DE PRUEBAS:")
    print("=" * 30)
    print(f"‚úÖ Casos correctos: {resultados_correctos}/{total_casos}")
    print(f"‚ùå Casos fallidos: {total_casos - resultados_correctos}/{total_casos}")
    porcentaje = (resultados_correctos / total_casos) * 100
    print(f"üìà Porcentaje de √©xito: {porcentaje:.1f}%")
    
    if resultados_correctos == total_casos:
        print("\nüéâ ¬°Todas las pruebas pasaron exitosamente!")
        print("La validaci√≥n de c√©dulas de 5-10 d√≠gitos est√° funcionando correctamente.")
    else:
        print(f"\n‚ö†Ô∏è Hay {total_casos - resultados_correctos} pruebas que fallaron.")
        print("Revisa la configuraci√≥n de validaci√≥n.")
    
    return resultados_correctos == total_casos


def probar_casos_reales():
    """
    Prueba casos reales t√≠picos de Colombia
    """
    print(f"\nüá®üá¥ PROBANDO CASOS REALES DE COLOMBIA")
    print("=" * 40)
    
    casos_colombia = [
        ("16789", "C√©dula antigua de 5 d√≠gitos"),
        ("234567", "C√©dula de 6 d√≠gitos"),
        ("1234567", "C√©dula de 7 d√≠gitos t√≠pica"),
        ("12345678", "C√©dula de 8 d√≠gitos com√∫n"),
        ("123456789", "C√©dula de 9 d√≠gitos moderna"),
        ("1020345678", "C√©dula de 10 d√≠gitos nueva"),
    ]
    
    print("Estos son ejemplos t√≠picos de c√©dulas colombianas:")
    for cedula, descripcion in casos_colombia:
        try:
            cliente_temp = Cliente(
                nombres="Prueba",
                apellidos="Colombia",
                cedula=cedula,
                celular="3001234567",
                direccion="Calle Real 456",
                barrio="Barrio Colombia"
            )
            cliente_temp.full_clean()
            print(f"   ‚úÖ {descripcion}: {cedula} - V√ÅLIDA")
        except ValidationError as e:
            print(f"   ‚ùå {descripcion}: {cedula} - INV√ÅLIDA")
            error_msg = e.message_dict.get('cedula', ['Error desconocido'])[0]
            print(f"      Error: {error_msg}")


if __name__ == '__main__':
    try:
        exito = probar_cedulas()
        probar_casos_reales()
        
        if exito:
            print(f"\n‚ú® CONCLUSI√ìN:")
            print("El sistema ahora acepta c√©dulas colombianas desde 5 d√≠gitos.")
            print("¬°Listo para usar en producci√≥n!")
        
    except Exception as e:
        print(f"\nüí• Error ejecutando pruebas: {str(e)}")
        sys.exit(1)