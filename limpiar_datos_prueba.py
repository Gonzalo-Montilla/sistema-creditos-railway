#!/usr/bin/env python
"""
Script para limpiar todos los datos de prueba del sistema
Este script elimina todos los datos pero mantiene la estructura de la base de datos
"""

import os
import sys
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'creditos.settings')
django.setup()

from main.models import (
    Cliente, Credito, Pago, Codeudor, CronogramaPago, 
    Cobrador, Ruta, TareaCobro, CarteraAnalisis
)
from django.contrib.auth.models import User
from django.db import transaction


def confirmar_eliminacion():
    """
    Solicita confirmaci√≥n al usuario antes de proceder
    """
    print("üö® ¬°ATENCI√ìN! üö®")
    print("="*50)
    print("Este script eliminar√° TODOS los datos de prueba del sistema:")
    print("‚Ä¢ Todos los clientes y sus documentos")
    print("‚Ä¢ Todos los cr√©ditos y cronogramas de pago")
    print("‚Ä¢ Todos los pagos registrados")
    print("‚Ä¢ Todos los codeudores")
    print("‚Ä¢ Todas las tareas de cobro")
    print("‚Ä¢ Todos los an√°lisis de cartera")
    print("‚Ä¢ Todos los cobradores")
    print("‚Ä¢ Todas las rutas")
    print()
    print("‚ö†Ô∏è  Esta acci√≥n NO se puede deshacer.")
    print("=" * 50)
    
    # Solicitar confirmaci√≥n m√∫ltiple
    confirmacion1 = input("¬øEst√° seguro de que desea eliminar todos los datos? (escriba 'SI' para continuar): ")
    if confirmacion1.upper() != 'SI':
        print("‚ùå Operaci√≥n cancelada.")
        return False
    
    confirmacion2 = input("¬øRealmente desea proceder? Escriba 'ELIMINAR' para confirmar: ")
    if confirmacion2.upper() != 'ELIMINAR':
        print("‚ùå Operaci√≥n cancelada.")
        return False
        
    confirmacion3 = input("√öltima confirmaci√≥n. Escriba 'CONFIRMAR' para eliminar todos los datos: ")
    if confirmacion3.upper() != 'CONFIRMAR':
        print("‚ùå Operaci√≥n cancelada.")
        return False
    
    return True


def mostrar_estadisticas_actuales():
    """
    Muestra las estad√≠sticas actuales antes de eliminar
    """
    print("\nüìä DATOS ACTUALES EN EL SISTEMA:")
    print("-" * 40)
    
    try:
        clientes = Cliente.objects.count()
        creditos = Credito.objects.count()
        pagos = Pago.objects.count()
        codeudores = Codeudor.objects.count()
        cronogramas = CronogramaPago.objects.count()
        cobradores = Cobrador.objects.count()
        rutas = Ruta.objects.count()
        tareas = TareaCobro.objects.count()
        analisis = CarteraAnalisis.objects.count()
        
        print(f"‚Ä¢ Clientes: {clientes}")
        print(f"‚Ä¢ Cr√©ditos: {creditos}")
        print(f"‚Ä¢ Pagos: {pagos}")
        print(f"‚Ä¢ Codeudores: {codeudores}")
        print(f"‚Ä¢ Cronogramas de pago: {cronogramas}")
        print(f"‚Ä¢ Cobradores: {cobradores}")
        print(f"‚Ä¢ Rutas: {rutas}")
        print(f"‚Ä¢ Tareas de cobro: {tareas}")
        print(f"‚Ä¢ An√°lisis de cartera: {analisis}")
        
        total = clientes + creditos + pagos + codeudores + cronogramas + cobradores + rutas + tareas + analisis
        print(f"\nüìà TOTAL DE REGISTROS: {total}")
        
        return total > 0
        
    except Exception as e:
        print(f"‚ùå Error al obtener estad√≠sticas: {str(e)}")
        return False


def limpiar_datos():
    """
    Elimina todos los datos de prueba del sistema
    """
    print("\nüîÑ Iniciando limpieza de datos...")
    
    eliminados = {
        'tareas_cobro': 0,
        'analisis_cartera': 0,
        'cronogramas': 0,
        'pagos': 0,
        'creditos': 0,
        'codeudores': 0,
        'clientes': 0,
        'cobradores': 0,
        'rutas': 0,
    }
    
    try:
        with transaction.atomic():
            # 1. Eliminar tareas de cobro (dependen de cronogramas)
            print("  üóëÔ∏è  Eliminando tareas de cobro...")
            eliminados['tareas_cobro'] = TareaCobro.objects.all().delete()[0]
            
            # 2. Eliminar an√°lisis de cartera
            print("  üóëÔ∏è  Eliminando an√°lisis de cartera...")
            eliminados['analisis_cartera'] = CarteraAnalisis.objects.all().delete()[0]
            
            # 3. Eliminar cronogramas de pago (dependen de cr√©ditos)
            print("  üóëÔ∏è  Eliminando cronogramas de pago...")
            eliminados['cronogramas'] = CronogramaPago.objects.all().delete()[0]
            
            # 4. Eliminar pagos (dependen de cr√©ditos)
            print("  üóëÔ∏è  Eliminando pagos...")
            eliminados['pagos'] = Pago.objects.all().delete()[0]
            
            # 5. Eliminar cr√©ditos (dependen de clientes)
            print("  üóëÔ∏è  Eliminando cr√©ditos...")
            eliminados['creditos'] = Credito.objects.all().delete()[0]
            
            # 6. Eliminar codeudores (dependen de clientes)
            print("  üóëÔ∏è  Eliminando codeudores...")
            eliminados['codeudores'] = Codeudor.objects.all().delete()[0]
            
            # 7. Eliminar clientes
            print("  üóëÔ∏è  Eliminando clientes...")
            eliminados['clientes'] = Cliente.objects.all().delete()[0]
            
            # 8. Eliminar cobradores
            print("  üóëÔ∏è  Eliminando cobradores...")
            eliminados['cobradores'] = Cobrador.objects.all().delete()[0]
            
            # 9. Eliminar rutas
            print("  üóëÔ∏è  Eliminando rutas...")
            eliminados['rutas'] = Ruta.objects.all().delete()[0]
            
        print("\n‚úÖ Limpieza completada exitosamente!")
        return eliminados
        
    except Exception as e:
        print(f"\n‚ùå Error durante la limpieza: {str(e)}")
        return None


def mostrar_resumen_limpieza(eliminados):
    """
    Muestra un resumen de los datos eliminados
    """
    if not eliminados:
        return
        
    print("\nüìã RESUMEN DE ELIMINACI√ìN:")
    print("=" * 40)
    
    total_eliminados = 0
    for tipo, cantidad in eliminados.items():
        if cantidad > 0:
            nombre_tipo = tipo.replace('_', ' ').title()
            print(f"‚Ä¢ {nombre_tipo}: {cantidad}")
            total_eliminados += cantidad
    
    print(f"\nüóëÔ∏è  TOTAL ELIMINADOS: {total_eliminados} registros")
    
    if total_eliminados > 0:
        print("\nüéâ ¬°Sistema limpio! Ahora puede crear datos nuevos desde cero.")
    else:
        print("\n‚ÑπÔ∏è  El sistema ya estaba limpio.")


def verificar_limpieza():
    """
    Verifica que todos los datos fueron eliminados correctamente
    """
    print("\nüîç Verificando limpieza...")
    
    verificaciones = {
        'Clientes': Cliente.objects.count(),
        'Cr√©ditos': Credito.objects.count(),
        'Pagos': Pago.objects.count(),
        'Codeudores': Codeudor.objects.count(),
        'Cronogramas': CronogramaPago.objects.count(),
        'Cobradores': Cobrador.objects.count(),
        'Rutas': Ruta.objects.count(),
        'Tareas de cobro': TareaCobro.objects.count(),
        'An√°lisis de cartera': CarteraAnalisis.objects.count(),
    }
    
    problema = False
    for tabla, cantidad in verificaciones.items():
        if cantidad > 0:
            print(f"  ‚ö†Ô∏è  {tabla}: {cantidad} registros restantes")
            problema = True
        else:
            print(f"  ‚úÖ {tabla}: Limpia")
    
    if problema:
        print("\n‚ö†Ô∏è  Algunos datos no fueron eliminados completamente.")
    else:
        print("\n‚úÖ Verificaci√≥n exitosa: Todos los datos fueron eliminados.")
    
    return not problema


def main():
    """
    Funci√≥n principal del script
    """
    print("üßπ LIMPIADOR DE DATOS DE PRUEBA")
    print("Sistema de Cr√©ditos - Limpieza Completa")
    print("=" * 50)
    
    # Mostrar estad√≠sticas actuales
    hay_datos = mostrar_estadisticas_actuales()
    
    if not hay_datos:
        print("\n‚ú® El sistema ya est√° limpio. No hay datos para eliminar.")
        return
    
    # Solicitar confirmaci√≥n
    if not confirmar_eliminacion():
        return
    
    # Realizar limpieza
    eliminados = limpiar_datos()
    
    if eliminados:
        # Mostrar resumen
        mostrar_resumen_limpieza(eliminados)
        
        # Verificar limpieza
        verificar_limpieza()
        
        print("\nüéØ SIGUIENTE PASO:")
        print("Ahora puede crear nuevos clientes, cr√©ditos y datos desde la interfaz web.")
        print("El sistema est√° completamente limpio y listo para usar.")
    
    print("\n‚ú® Proceso completado!")


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  Proceso interrumpido por el usuario.")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• Error inesperado: {str(e)}")
        sys.exit(1)