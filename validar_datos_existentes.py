#!/usr/bin/env python
"""
Script para validar datos existentes antes de aplicar las nuevas validaciones
"""
import os
import sys
import django
from datetime import date
import re

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'creditos.settings')
django.setup()

from main.models import Cliente, Codeudor

def validar_cedula(cedula):
    """Valida formato de c√©dula (8-10 d√≠gitos)"""
    if not cedula:
        return False, "C√©dula vac√≠a"
    
    if not re.match(r'^\d{8,10}$', cedula):
        return False, f"Formato inv√°lido: '{cedula}' (debe ser 8-10 d√≠gitos)"
    
    return True, "OK"

def validar_celular(celular):
    """Valida formato de celular (10 d√≠gitos, empieza con 3)"""
    if not celular:
        return False, "Celular vac√≠o"
    
    if not re.match(r'^3[0-9]{9}$', celular):
        return False, f"Formato inv√°lido: '{celular}' (debe ser 3xxxxxxxxx)"
    
    return True, "OK"

def validar_telefono_fijo(telefono):
    """Valida formato de tel√©fono fijo (7-8 d√≠gitos)"""
    if not telefono:
        return True, "OK (opcional)"
    
    if not re.match(r'^[2-8][0-9]{6,7}$', telefono):
        return False, f"Formato inv√°lido: '{telefono}' (debe ser 7-8 d√≠gitos)"
    
    return True, "OK"

def validar_datos_clientes():
    print("üîç VALIDANDO DATOS DE CLIENTES")
    print("=" * 50)
    
    clientes = Cliente.objects.all()
    problemas_cedula = []
    problemas_celular = []
    problemas_telefono = []
    problemas_referencias = []
    
    for cliente in clientes:
        # Validar c√©dula
        valido, mensaje = validar_cedula(cliente.cedula)
        if not valido:
            problemas_cedula.append(f"Cliente {cliente.id}: {mensaje}")
        
        # Validar celular
        valido, mensaje = validar_celular(cliente.celular)
        if not valido:
            problemas_celular.append(f"Cliente {cliente.id} ({cliente.nombre_completo}): {mensaje}")
        
        # Validar tel√©fono fijo
        valido, mensaje = validar_telefono_fijo(cliente.telefono_fijo)
        if not valido:
            problemas_telefono.append(f"Cliente {cliente.id} ({cliente.nombre_completo}): {mensaje}")
        
        # Validar referencias
        if cliente.referencia1_telefono:
            valido, mensaje = validar_celular(cliente.referencia1_telefono)
            if not valido:
                problemas_referencias.append(f"Cliente {cliente.id} Ref1: {mensaje}")
        
        if cliente.referencia2_telefono:
            valido, mensaje = validar_celular(cliente.referencia2_telefono)
            if not valido:
                problemas_referencias.append(f"Cliente {cliente.id} Ref2: {mensaje}")
    
    # Mostrar resultados
    print(f"üìä Total clientes analizados: {clientes.count()}")
    print()
    
    if problemas_cedula:
        print("‚ùå PROBLEMAS EN C√âDULAS:")
        for problema in problemas_cedula:
            print(f"   ‚Ä¢ {problema}")
        print()
    else:
        print("‚úÖ C√©dulas de clientes: OK")
    
    if problemas_celular:
        print("‚ùå PROBLEMAS EN CELULARES:")
        for problema in problemas_celular:
            print(f"   ‚Ä¢ {problema}")
        print()
    else:
        print("‚úÖ Celulares de clientes: OK")
    
    if problemas_telefono:
        print("‚ùå PROBLEMAS EN TEL√âFONOS FIJOS:")
        for problema in problemas_telefono:
            print(f"   ‚Ä¢ {problema}")
        print()
    else:
        print("‚úÖ Tel√©fonos fijos: OK")
    
    if problemas_referencias:
        print("‚ùå PROBLEMAS EN REFERENCIAS:")
        for problema in problemas_referencias:
            print(f"   ‚Ä¢ {problema}")
        print()
    else:
        print("‚úÖ Referencias: OK")
    
    return len(problemas_cedula) + len(problemas_celular) + len(problemas_telefono) + len(problemas_referencias)

def validar_datos_codeudores():
    print("üîç VALIDANDO DATOS DE CODEUDORES")
    print("=" * 50)
    
    codeudores = Codeudor.objects.all()
    problemas_cedula = []
    problemas_celular = []
    cedulas_duplicadas = []
    
    # Detectar duplicados
    cedulas_vistas = {}
    for codeudor in codeudores:
        if codeudor.cedula in cedulas_vistas:
            cedulas_duplicadas.append(f"C√©dula '{codeudor.cedula}' duplicada: IDs {cedulas_vistas[codeudor.cedula]} y {codeudor.id}")
        else:
            cedulas_vistas[codeudor.cedula] = codeudor.id
        
        # Validar formato c√©dula
        valido, mensaje = validar_cedula(codeudor.cedula)
        if not valido:
            problemas_cedula.append(f"Codeudor {codeudor.id}: {mensaje}")
        
        # Validar celular
        valido, mensaje = validar_celular(codeudor.celular)
        if not valido:
            problemas_celular.append(f"Codeudor {codeudor.id} ({codeudor.nombre_completo}): {mensaje}")
    
    # Mostrar resultados
    print(f"üìä Total codeudores analizados: {codeudores.count()}")
    print()
    
    if cedulas_duplicadas:
        print("‚ùå C√âDULAS DUPLICADAS:")
        for duplicado in cedulas_duplicadas:
            print(f"   ‚Ä¢ {duplicado}")
        print()
    else:
        print("‚úÖ No hay c√©dulas duplicadas")
    
    if problemas_cedula:
        print("‚ùå PROBLEMAS EN C√âDULAS:")
        for problema in problemas_cedula:
            print(f"   ‚Ä¢ {problema}")
        print()
    else:
        print("‚úÖ C√©dulas de codeudores: OK")
    
    if problemas_celular:
        print("‚ùå PROBLEMAS EN CELULARES:")
        for problema in problemas_celular:
            print(f"   ‚Ä¢ {problema}")
        print()
    else:
        print("‚úÖ Celulares de codeudores: OK")
    
    return len(problemas_cedula) + len(problemas_celular) + len(cedulas_duplicadas)

def sugerir_correcciones():
    print("\nüîß SUGERENCIAS DE CORRECCI√ìN")
    print("=" * 50)
    print("Si hay problemas, puedes:")
    print("1. Corregir datos manualmente en el admin de Django")
    print("2. Ejecutar script de correcci√≥n autom√°tica")
    print("3. Aplicar migraci√≥n ignorando errores (NO recomendado)")
    print()
    print("Para corregir autom√°ticamente:")
    print("‚Ä¢ C√©dulas inv√°lidas: rellenar con ceros a la izquierda")
    print("‚Ä¢ Celulares inv√°lidos: reemplazar por n√∫mero gen√©rico")
    print("‚Ä¢ Codeudores duplicados: fusionar o eliminar")

if __name__ == "__main__":
    try:
        print("üîç VALIDACI√ìN DE DATOS EXISTENTES")
        print("Antes de aplicar nuevas validaciones...")
        print("=" * 60)
        print()
        
        problemas_clientes = validar_datos_clientes()
        print()
        problemas_codeudores = validar_datos_codeudores()
        
        total_problemas = problemas_clientes + problemas_codeudores
        
        print("\n" + "=" * 60)
        print(f"üìä RESUMEN: {total_problemas} problemas encontrados")
        
        if total_problemas == 0:
            print("üéâ ¬°PERFECTO! Puedes aplicar la migraci√≥n sin problemas")
            print("Ejecuta: python manage.py migrate")
        else:
            print("‚ö†Ô∏è  HAY PROBLEMAS que deben resolverse antes de la migraci√≥n")
            sugerir_correcciones()
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        import traceback
        traceback.print_exc()